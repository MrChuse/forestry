bee_genders:
  Princess: [Princess, 0]
  Drone: [Drone, 0]
  Queen: [Queen, 0]
genes:
  trait: "Trait : active, inactive"
  species: species
  species_helper_text: Species of this bee. Active allele of this gene identifies unique appearance of this bee and the resources the queen produces while alive.
  fertility: fertility
  fertility_helper_text: Fertility is the number of <b>drones</b> the queen will spawn after dying. Queen always spawns 1 <b>princess</b> and <i>fertility</i> <b>drones</b>.
  lifespan: lifespan
  lifespan_helper_text: "Lifespan is the number of ticks the queen will live for. The queen has a chance to produce resources on each tick except the last one: it dies without producing anything."
  speed: speed
  speed_helper_text: Speed is the multiplier for the chances of producing resources while queen is alive. Mind that bees of different species may produce the same resource with different production rates even if the active speed allele is the same.
buildings:
  Forage: Forage # left side bar button
  Build: Build # left side bar button
  Inventory: Inventory
  Sort: Sort # sort button
  Apiary: Apiary
  Take: Take all # take all button
  Alveary: Alveary
  Open Inspect Window: Open Inspect Window
  Inspect Window: Inspect Window
  Inspect: Inspect # left side bar button
  Inspection popup: Inspection costs 1 honey to perform
resources:
  RESOURCES: RESOURCES
  honey: honey
  wood: wood
  flowers: flowers
  gold: gold
  royal jelly: royal jelly
  string: string
  pollen cluster: pollen cluster
esc_menu:
  Greetings Window: Greetings Window
  Mendelian Inheritance: Mendelian Inheritance
  Save: Save
  Load: Load
  Cancel: Cancel
  Settings: Settings
  Fullscreen: Fullscreen
  Master volume: Master volume
  Click volume: Click volume
  Exit: Exit
  Mating History: Mating History
  mendel_notification: "Notification: Mendelian inheritance tutorial is now available in the esc menu."
  load_confirm: You can lose unsaved progress. Continue?
  save_confirm: You can lose saved progress. Continue?
genes_alleles:
  BeeSpecies:
    FOREST: [FOREST]
    MEADOWS: [MEADOWS]
    COMMON: [COMMON]
    CULTIVATED: [CULTIVATED]
    MAJESTIC: [MAJESTIC]
    NOBLE: [NOBLE]
    IMPERIAL: [IMPERIAL]
    DILIGENT: [DILIGENT]
    UNWEARY: [UNWEARY]
    INDUSTRIOUS: [INDUSTRIOUS]
  BeeFertility:
    ONE: ['1']
    TWO: ['2']
    THREE: ['3']
    FOUR: ['4']
  BeeLifespan:
    LONGEST: [Longest]
    LONGER: [Longer]
    LONG: [Long]
    ELONGATED: [Elongated]
    NORMAL: [Normal]
    SHORTENED: [Shortened]
    SHORT: [Short]
    SHORTER: [Shorter]
    SHORTEST: [Shortest]
  BeeSpeed:
    FASTEST: [FASTEST]
    FASTER: [FASTER]
    FAST: [FAST]
    NORMAL: [NORMAL]
    SLOW: [SLOW]
    SLOWER: [SLOWER]
    SLOWEST: [SLOWEST]

texts:
  helper_text:
    - |
      Welcome to a demo of my little game about selective breeding!
      You are going to be a professional bee breeder and your goal for this demo is to build an alveary.
      In order to do this you'll have to (surprisingly) breed the bees you have and try to find the pairs of species that result in a mutation after mating.

    - |
      You start with 0 bees, so you need a way to collect them in the first place. `Forage` button on the left will help you.
      You can put the bees into the apiary, just click the bee and click one of the two top slots in the apiary window.

    - |
      Bees have genes, and you only see their phenotype at first; to discover their genotype you should place the bee into the inspection slot on the left and hit `Inspect` button
      You can build new apiaries using `Build` button on the left. When you build an alveary, you win the game!

    - |
      Also, you can change the size of the inventory window (if you have lower resolution, you may not see the bees' species and sex)
      On the right side you can see logs which show when something went wrong and some other information

    - |
      Don't forget to save your progress using `Save` button in the esc menu.
      You can load your saved progress. Only one save slot is available (you can manipulate save.forestry file however)
      The esc menu also has the Mendelian Inheritance helper window if you are interested in genetics

  mendel_text:
    - |
      This helper window will explain basics of genetics according to Mendelian Inheritance.
      It is not actually needed to win the game but will help if you want to breed bees efficiently.

      The most important fact to remember is that when two bees with <b>different</b> species alleles mate, their offspring may or may not have a mutation chance to transform into the <b>different</b> species.

    - |
      First, let's develop an understanding of fundamentals:
      <b>Phenotype</b> is the set of observable characteristics or traits of an organism, i.e. the appearance and behaviour.
      <b>Genotype</b> is a sequence of genes.
      A gene consists of <b>two alleles</b>.
      <b>Allele</b> is a variant of a gene, so one gene can be represented by several alleles.
      A <b>purebred</b> organism is the organism all of whose genes consist of identical alleles.

    - |
      Now we are ready to build upon this foundation.
      Gregor Mendel is the Moravian Augustinian monk who founded the modern science of genetics and, as this game is about genetics, it's quite useful to understand Mendelian Inheritance.

    - |
      Law of independent assortment:
      <i>Genes of different traits can segregate independently during the formation of gametes.</i>
      This is quite self-explanatory. The offspring will get alleles of different genes independently.
      Consequently, it's enough to demonstrate the breeding of single-gene organisms.
      I will name their alleles with letters <font color=#ec3661>A</font>, <font color=#ec3661>B</font>, <font color=#3687ec>c</font> and <font color=#3687ec>d</font>.

    - |
      Law of Dominance and Uniformity:
      <i>Some alleles are <font color=#ec3661>dominant</font> while others are <font color=#3687ec>recessive</font>; an organism with at least one <font color=#ec3661>dominant</font> allele will display the effect of the <font color=#ec3661>dominant</font> allele.</i>
      I will refer to an allele which will display its effect as the active allele. Active alleles are located in the left column of the inspection window.
      If the child has two <font color=#ec3661>dominant</font> or two <font color=#3687ec>recessive</font> alleles, one of them will be chosen to be active at random.

      I will now show several examples to demonstrate the laws.
      Note that these examples show you the mechanics of the game and not real world.
      First, let's consider two purebred organisms:
      <font color=#ec3661>AA</font> + <font color=#ec3661>BB</font> -> 50% <font color=#ec3661>AB</font>, 50% <font color=#ec3661>BA</font> as these alleles are both <font color=#ec3661>dominant</font> (and these organisms are actually identical in their genotype in the sense that these will produce identical offsprings and different in their phenotype). This example is shown in the first two rows.
      <font color=#ec3661>AA</font> + <font color=#3687ec>cc</font> -> 100% <font color=#ec3661>A</font><font color=#3687ec>c</font>, because <font color=#ec3661>A</font> is <font color=#ec3661>dominant</font> and <font color=#3687ec>c</font> is <font color=#3687ec>recessive</font>. This example is shown in the two following rows.
      <font color=#3687ec>cc</font> + <font color=#3687ec>dd</font> -> 50% <font color=#3687ec>cd</font>, 50% <font color=#3687ec>dc</font>, because both alleles are <font color=#3687ec>recessive</font>. This example is shown in the last two rows.

      These offspring are called F1-generation.
      The second experiment of this group demonstrates the first law.

    - |
      Law of segregation:
      <i>During gamete formation, the alleles for each gene segregate from each other so that each gamete carries only one allele for each gene.</i>
      This basically means that alleles only one allele for each gene will be inherited by an offspring and each of the alleles of the parent will be inherited with equal probability.

      Let's breed two organisms of F1-generation:
      <font color=#ec3661>AB</font> + <font color=#ec3661>AB</font> -> 25% <font color=#ec3661>AA</font>, 25% <font color=#ec3661>AB</font>, 25% <font color=#ec3661>BA</font>, 25% <font color=#ec3661>BB</font>
      <font color=#ec3661>A</font><font color=#3687ec>c</font> + <font color=#ec3661>A</font><font color=#3687ec>c</font> -> 25% <font color=#ec3661>AA</font>, 50% <font color=#ec3661>A</font><font color=#3687ec>c</font>, 25% <font color=#3687ec>cc</font>
      The second experiment of this group demonstrates the second law.

    - |
      And some more experiments to highlight useful combinations
      Combine purebred and F1:
      <font color=#ec3661>AA</font> + <font color=#ec3661>A</font><font color=#3687ec>c</font> -> 50% <font color=#ec3661>AA</font>, 50% <font color=#ec3661>A</font><font color=#3687ec>c</font>
      <font color=#ec3661>A</font><font color=#3687ec>c</font> + <font color=#3687ec>cc</font> -> 50% <font color=#ec3661>A</font><font color=#3687ec>c</font>, 50% <font color=#3687ec>cc</font>

      And finally let's breed radically different organisms:
      <font color=#ec3661>AB</font> + <font color=#3687ec>cd</font> -> 25% <font color=#ec3661>A</font><font color=#3687ec>c</font>, 25% <font color=#ec3661>A</font><font color=#3687ec>d</font>, 25% <font color=#ec3661>B</font><font color=#3687ec>c</font>, 25% <font color=#ec3661>B</font><font color=#3687ec>d</font>
      <font color=#ec3661>A</font><font color=#3687ec>c</font> + <font color=#ec3661>B</font><font color=#3687ec>d</font> -> 12.5% <font color=#ec3661>AB</font> 12.5% <font color=#ec3661>BA</font>, 25% <font color=#ec3661>A</font><font color=#3687ec>d</font>, 25% <font color=#ec3661>B</font><font color=#3687ec>c</font>, 12.5% <font color=#3687ec>cd</font>, 12.5% <font color=#3687ec>dc</font>

    - |
      The actual algorithm used in game is as follows:
      Pick one allele of the first parent at random
      Pick one allele of the second parent at random
      Apply mutations
      if their dominance is identical, pick one of them to be active at random
      else pick the dominant one to be active
